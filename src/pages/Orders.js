import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";

const Orders = ({ orders, setOrders }) => {
  const [showScrollTop, setShowScrollTop] = useState(false);
  const [ratings, setRatings] = useState(() => {
    const savedRatings = localStorage.getItem("orderRatings");
    return savedRatings ? JSON.parse(savedRatings) : {};
  });

  useEffect(() => {
    const handleScroll = () => {
      setShowScrollTop(window.pageYOffset > 300);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const handleDeleteOrder = (orderId) => {
    const updatedOrders = orders.filter(order => order.id !== orderId);
    setOrders(updatedOrders);
    localStorage.setItem("orders", JSON.stringify(updatedOrders));
  };

  const handleRatingChange = (orderId, rating) => {
    const updatedRatings = { ...ratings, [orderId]: rating };
    setRatings(updatedRatings);
    localStorage.setItem("orderRatings", JSON.stringify(updatedRatings));
  };

  const getDeliveryStatus = (orderTime) => {
    if (!orderTime) return "–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞";

    let orderDate = new Date(orderTime);

    if (isNaN(orderDate.getTime())) {
      orderDate = new Date(orderTime.replace(" ", "T"));
    }

    if (isNaN(orderDate.getTime())) return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã";

    const now = new Date();
    const deliveryTime = new Date(orderDate);
    deliveryTime.setHours(orderDate.getHours() + Math.floor(Math.random() * 3) + 2);

    return now > deliveryTime ? "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" : `–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è ${deliveryTime.toLocaleString("ru-RU", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
    })}`;
  };

  const getPaymentStatus = (paymentMethod) => {
    const normalizedMethod = paymentMethod.toLowerCase();
    return (normalizedMethod === "—Å–±–ø" || normalizedMethod === "sbp" || normalizedMethod === "–±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")
      ? "–û–ø–ª–∞—á–µ–Ω–æ"
      : "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏";
  };
  const StarRating = ({ orderId, rating, onRate }) => {
    const [hovered, setHovered] = useState(0);
  
    return (
      <div className="star-rating">
        {[1, 2, 3, 4, 5].map((star) => (
          <span
            key={star}
            className={`star ${star <= (hovered || rating) ? "filled" : ""}`}
            onMouseEnter={() => setHovered(star)}
            onMouseLeave={() => setHovered(0)}
            onClick={() => onRate(orderId, star)}
          >
            ‚òÖ
          </span>
        ))}
      </div>
    );
  };
  

  return (
    <div>
      <h2>üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã</h2>
      {orders.length === 0 ? (
        <p>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>
      ) : (
        <ul className="order-list">
          {orders.map((order) => {
            const deliveryStatus = getDeliveryStatus(order.orderTime);
            const isDelivered = deliveryStatus === "–î–æ—Å—Ç–∞–≤–ª–µ–Ω";

            return (
              <li key={order.id} className="order-item">
                <h3>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</h3>
                <p><strong>–ò—Ç–æ–≥–æ:</strong> {order.total} ‚ÇΩ</p>
                <p><strong>–û–ø–ª–∞—Ç–∞:</strong> {getPaymentStatus(order.paymentMethod)}</p>
                <p><strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> {deliveryStatus}</p>
                <h4>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</h4>
                <ul className="order-items">
                  {order.items.map((item) => (
                    <li key={item.id} className="order-product">
                      <img src={item.image} alt={item.name} className="order-img" />
                      <div className="order-info">
                        <p><strong>{item.name}</strong></p>
                        <p>–¶–µ–Ω–∞: {item.price} ‚ÇΩ</p>
                        <p>–ö–æ–ª-–≤–æ: {item.quantity}</p>
                      </div>
                    </li>
                  ))}
                </ul>

                {isDelivered && (
                  <div className="order-rating">
                    {isDelivered && (
                      <div className="order-rating">
                       <label>–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑: </label>
                        <StarRating
                           orderId={order.id}
                            rating={ratings[order.id] || 0}
                            onRate={handleRatingChange}
                        />
                      
                      </div>
                    )}

                    {ratings[order.id] && <p>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {ratings[order.id]} ‚òÖ</p>}
                  </div>
                )}

                <button onClick={() => handleDeleteOrder(order.id)} className="delete-order-btn">
                  ‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
              </li>
            );
          })}
        </ul>
      )}

      {showScrollTop && (
        <button className="scroll-top-btn" onClick={scrollToTop}>‚Üë</button>
      )}
    </div>
  );
};

export default Orders;
